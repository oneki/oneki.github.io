"use strict";(self.webpackChunkonekijs_website=self.webpackChunkonekijs_website||[]).push([[75396],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return k}});var n=r(67294),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a().createContext({}),c=function(e){var t=a().useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a().createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a().createElement(a().Fragment,{},t)}},m=a().forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?a().createElement(k,o(o({ref:t},s),{},{components:r})):a().createElement(k,o({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return a().createElement.apply(null,l)}return a().createElement.apply(null,r)}m.displayName="MDXCreateElement"},22033:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),l=["components"],o={id:"AppStore",title:"AppStore",sidebar_label:"AppStore"},p=void 0,s={unversionedId:"framework-api/interfaces/AppStore",id:"framework-api/interfaces/AppStore",title:"AppStore",description:"Properties",source:"@site/docs/framework-api/interfaces/AppStore.md",sourceDirName:"framework-api/interfaces",slug:"/framework-api/interfaces/AppStore",permalink:"/docs/framework-api/interfaces/AppStore",draft:!1,editUrl:"https://github.com/oneki/oneki.github.io/edit/source/docs/framework-api/interfaces/AppStore.md",tags:[],version:"current",frontMatter:{id:"AppStore",title:"AppStore",sidebar_label:"AppStore"},sidebar:"someSidebar",previous:{title:"AppStateProps",permalink:"/docs/framework-api/interfaces/AppStateProps"},next:{title:"AsyncBindState",permalink:"/docs/framework-api/interfaces/AsyncBindState"}},c={},u=[{value:"Properties",id:"properties",level:3}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"__type(namespace: string,saga: Saga<>,name: string): void\n")),(0,i.kt)("br",null),(0,i.kt)("h3",{id:"properties"},"Properties"),(0,i.kt)("font",{size:"2"},(0,i.kt)("i",null,"(Mandatory properties are in bold)")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Properties"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"cancelSaga")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"getState")),(0,i.kt)("td",{parentName:"tr",align:null},"getState(): S"),(0,i.kt)("td",{parentName:"tr",align:null},"Reads the state tree managed by the store.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"injectReducers")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"removeReducers")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"replaceReducer")),(0,i.kt)("td",{parentName:"tr",align:null},"replaceReducer(nextReducer: Reducer<S, A",">","): void"),(0,i.kt)("td",{parentName:"tr",align:null},"Replaces the reducer currently used by the store to calculate the state.")))),(0,i.kt)("p",null,"You might need this if your app implements code splitting and you want to",(0,i.kt)("br",{parentName:"p"}),"\n","load some of the reducers dynamically. You might also need this if you",(0,i.kt)("br",{parentName:"p"}),"\n","implement a hot reloading mechanism for Redux. |\n| ",(0,i.kt)("strong",{parentName:"p"},"runSaga")," |  |  |\n| ",(0,i.kt)("strong",{parentName:"p"},"subscribe")," | subscribe(listener: ): Unsubscribe | Adds a change listener. It will be called any time an action is",(0,i.kt)("br",{parentName:"p"}),"\n","dispatched, and some part of the state tree may potentially have changed.",(0,i.kt)("br",{parentName:"p"}),"\n","You may then call ",(0,i.kt)("inlineCode",{parentName:"p"},"getState()")," to read the current state tree inside the",(0,i.kt)("br",{parentName:"p"}),"\n","callback."),(0,i.kt)("p",null,"You may call ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," from a change listener, with the following",(0,i.kt)("br",{parentName:"p"}),"\n","caveats:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The subscriptions are snapshotted just before every ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," call.",(0,i.kt)("br",{parentName:"p"}),"\n","If you subscribe or unsubscribe while the listeners are being invoked,",(0,i.kt)("br",{parentName:"p"}),"\n","this will not have any effect on the ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," that is currently in",(0,i.kt)("br",{parentName:"p"}),"\n","progress. However, the next ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," call, whether nested or not,",(0,i.kt)("br",{parentName:"p"}),"\n","will use a more recent snapshot of the subscription list.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The listener should not expect to see all states changes, as the state",(0,i.kt)("br",{parentName:"p"}),"\n","might have been updated multiple times during a nested ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," before",(0,i.kt)("br",{parentName:"p"}),"\n","the listener is called. It is, however, guaranteed that all subscribers",(0,i.kt)("br",{parentName:"p"}),"\n","registered before the ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch()")," started will be called with the latest",(0,i.kt)("br",{parentName:"p"}),"\n","state by the time it exits. |\n| dispatch | Dispatch<A",">"," | Dispatches an action. It is the only way to trigger a state change.",(0,i.kt)("br",null),(0,i.kt)("br",null),"The ",(0,i.kt)("code",null,"reducer")," function, used to create the store, will be called with the",(0,i.kt)("br",null),"current state tree and the given ",(0,i.kt)("code",null,"action"),". Its return value will be",(0,i.kt)("br",null),"considered the ",(0,i.kt)("strong",{parentName:"p"},"next")," state of the tree, and the change listeners will",(0,i.kt)("br",null),"be notified.",(0,i.kt)("br",null),(0,i.kt)("br",null),"The base implementation only supports plain object actions. If you want",(0,i.kt)("br",null),"to dispatch a Promise, an Observable, a thunk, or something else, you",(0,i.kt)("br",null),"need to wrap your store creating function into the corresponding",(0,i.kt)("br",null),"middleware. For example, see the documentation for the ",(0,i.kt)("code",null,"redux-thunk"),(0,i.kt)("br",null),"package. Even the middleware will eventually dispatch plain object",(0,i.kt)("br",null),"actions using this method. |"))))}m.isMDXComponent=!0}}]);