(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n(1),r=n(9),a=(n(0),n(167)),s={id:"use-post",title:"usePost",sidebar_label:"usePost"},i={id:"hooks/use-post",title:"usePost",description:"```javascript\r",source:"@site/docs/hooks/020-use-post.md",permalink:"/docs/hooks/use-post",editUrl:"https://github.com/oneki/oneki.github.io/edit/source/docs/hooks/020-use-post.md",sidebar_label:"usePost",sidebar:"someSidebar",previous:{title:"useGet",permalink:"/docs/hooks/use-get"},next:{title:"usePut",permalink:"/docs/hooks/use-put"}},c=[{value:"Parameters",id:"parameters",children:[]},{value:"Examples",id:"examples",children:[{value:"Minimal example",id:"minimal-example",children:[]},{value:"onSuccess example",id:"onsuccess-example",children:[]},{value:"onError with notification example",id:"onerror-with-notification-example",children:[]}]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const [post, loading] = usePost(url, options);\nconst [post, loading] = useSecurePost(url, options);\n")),Object(a.b)("p",null,"The goal of ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"usePost"))," is to send an ajax POST request and returns back the payload sent by the server.",Object(a.b)("br",null),"\nBy default, the body of the request is a JSON string."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"useSecurePost"))," is similar to ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"usePost"))," but adds a ",Object(a.b)("em",{parentName:"p"},"Bearer")," authorization header that contains the token received and stored by ",Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"useLoginService"))," in the redux store")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},Object(a.b)("em",{parentName:"strong"},"Note")),": The data are stored in the state of the component and ",Object(a.b)("strong",{parentName:"p"},"not")," in the redux store.")),Object(a.b)("h3",{id:"parameters"},"Parameters"),Object(a.b)("h4",{id:"inputs"},"Inputs"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"// the URL the Ajax request is sent to [mandatory]\nurl: string,\n\n// all options below are [optional]\noptions: {\n  // if onSuccess is a function, this function is called after a sucessful call\n  // if onSuccess is a string, the value must be a URL. The hook does a redirect to this URL after a sucessful call\n  onSuccess: string | function(data, context), \n\n  // if onError is a function, this function is called in case of failure (Promise / async allowed)\n  // if onError is a string, the value must be a URL then the hook does a redirect to this URL after a failure\n  // if onError is not present, the error message is sent directly to the notificationService\n  onError: string | function(error, context),\n\n  // parameters below are passed directly to fetch()\n  // See https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n  // for more details\n  headers,\n  credentials,\n  cache,\n  redirect,\n  referrer,\n  referrerPolicy,\n  integrity,\n  keepalive,\n  signal\n} \n")),Object(a.b)("h4",{id:"outputs"},"Outputs"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'// post is a function that sends the ajax POST request\n// the signature is: post(data, options) where:\n// - "data" is the body of the POST request\n// - "options" is the same object as the one used for usePost. Use this object to override an option passed to usePost\npost: function(data, options),\n\n// a flag to indicate if the ajax request is pending\n// "loading" is true only after 100ms (configurable via settings.js) and if the ajax request is pending\nloading: boolean\n')),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("h3",{id:"minimal-example"},"Minimal example"),Object(a.b)("p",null,"This example shows how to display a form with two input fields: ",Object(a.b)("strong",{parentName:"p"},"name")," and ",Object(a.b)("strong",{parentName:"p"},"firstname")," and submit the data to a server via a ajax POST request."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"If the call is successful, one is redirected to ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("em",{parentName:"strong"},"/users"))),Object(a.b)("li",{parentName:"ul"},"If the call fails, the error is sent to the ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("em",{parentName:"strong"},"notificationService")))),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { usePost, useSetting } from "onekijs";\nimport React from "react";\nimport { useForm } from "react-hook-form";\n\nexport default () => {\n  // baseUrl is defined in settings.js\n  const baseUrl = useSetting("server.baseUrl");\n\n  // use react-hook-from to build the form\n  const { register, handleSubmit } = useForm(); \n  \n  const [post, loading] = usePost(`${baseUrl}/users`, {\n    onSuccess: "/users" // if the post request is successful, redirect to the /users page\n  });\n\n  return (\n    <div>\n      <form>\n        {/* register your input into the hook by invoking the "register" function */}\n        <div><b>Name: </b><input name="name" ref={register}/></div>\n        <div><b>Firstname: </b><input name="firstname" ref={register} /></div>\n        <LoadingButton label="Submit" loading={loading} onClick={handleSubmit(post)} />\n      </form>\n    </div>\n  );\n};\n\n// A simple "loading" button\nconst LoadingButton = ({ loading, label, onClick }) => {\n  const buttonLabel = loading ? \'Loading ...\' : label;\n  return (\n    <button onClick={onClick}>{buttonLabel}</button>\n  )\n};\n')),Object(a.b)("h3",{id:"onsuccess-example"},"onSuccess example"),Object(a.b)("p",null,"This example show how to display a success message on top of the form if the POST call is successful."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { usePost, useSetting } from "onekijs";\nimport React, { useCallback, useState } from "react";\nimport { useForm } from "react-hook-form";\n\nexport default () => {\n  // baseUrl is defined in settings.js\n  const baseUrl = useSetting("server.baseUrl");\n\n  const [successMsg, setSuccessMsg] = useState(null);\n\n  // use react-hook-from to build the form\n  const { register, handleSubmit } = useForm();\n\n  // onError must be encapsulated in a useCallback\n  const onSuccess = useCallback((data, context) => {\n    setSuccessMsg(`User ${data.firstname} ${data.name} created successfully`);\n  }, [setSuccessMsg]);\n  \n  const [post, loading] = usePost(`${baseUrl}/users`, { onSuccess });\n\n  return (\n    <div>\n      {successMsg && <span style={{color: \'green\'}}>{successMsg}</span>}\n      <form>\n        {/* register your input into the hook by invoking the "register" function */}\n        <div><b>Name: </b><input name="name" ref={register}/></div>\n        <div><b>Firstname: </b><input name="firstname" ref={register} /></div>\n        <LoadingButton label="Submit" loading={loading} onClick={handleSubmit(post)} />\n      </form>\n    </div>\n  );\n};\n\n// A simple "loading" button\nconst LoadingButton = ({ loading, label, onClick }) => {\n  const buttonLabel = loading ? \'Loading ...\' : label;\n  return (\n    <button onClick={onClick}>{buttonLabel}</button>\n  )\n};\n')),Object(a.b)("h3",{id:"onerror-with-notification-example"},"onError with notification example"),Object(a.b)("p",null,"This is an example showing how to handle onError using the notification service",Object(a.b)("br",null),'\nActually this is exactly what it\'s done if no "onError" is specified in useGet'),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { usePost, useNotificationService } from "onekijs";\nimport React, { useCallback } from "react";\nimport { useForm } from "react-hook-form";\n\nexport default () => {\n  // use react-hook-from to build the form\n  const { register, handleSubmit } = useForm();\n  \n  const notificationService = useNotificationService();\n\n  // onError must be encapsulated in a useCallback\n  const onError = useCallback(e => {\n    notificationService.error(e);\n    // the lifetime of the error is taken from settings.notification.lifetime.error\n    // if you want a custom lifetime for this error, you have to use the send method \n    // notificationService.send({\n    //   topic: \'error\',\n    //   lifeTime: 1000,\n    //   payload: e\n    // })\n  }, [notificationService]);\n  \n  const [post, loading] = usePost("WRONG_URL", { onError });\n\n  return (\n    <div>\n      <form>\n        {/* register your input into the hook by invoking the "register" function */}\n        <div><b>Name: </b><input name="name" ref={register}/></div>\n        <div><b>Firstname: </b><input name="firstname" ref={register} /></div>\n        <LoadingButton label="Submit" loading={loading} onClick={handleSubmit(post)} />\n      </form>\n    </div>\n  );\n};\n\n// A simple "loading" button\nconst LoadingButton = ({ loading, label, onClick }) => {\n  const buttonLabel = loading ? \'Loading ...\' : label;\n  return (\n    <button onClick={onClick}>{buttonLabel}</button>\n  )\n};\n')))}u.isMDXComponent=!0},167:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},b=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=u(n),m=o,d=b["".concat(s,".").concat(m)]||b[m]||p[m]||a;return n?r.a.createElement(d,i({ref:t},l,{components:n})):r.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);